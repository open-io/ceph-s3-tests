version: v.10
name: ceph-s3-tests

jobs:
  - job: Run Ceph's S3 test suite
    steps:

      - name: Checkout application
        checkout: '{{ .cds.workspace }}'

      - name: Install dependencies
        script: |+
          #!/bin/bash
          apt-get update -q
          apt-get install -q -y \
            debianutils libevent-dev libffi-dev libxml2-dev libxslt1-dev \
            python3-dev python3-pip python3-virtualenv zlib1g-dev
          virtualenv -p python3 --download virtualenv
          ./virtualenv/bin/pip3 install -r requirements.txt

      - name: Generate configuration file
        script: |+
          #!/bin/bash
          cd $HOME
          echo -n "Generating test configuration file: $HOME/autogenerated.conf "
          sed \
              -e s,%S3_SERVER%,{{.cds.env.s3_server}}, \
              -e s,%S3_PORT%,{{.cds.env.s3_port}}, \
              -e s,%S3_PROJECT_NAME%,{{.cds.env.s3_project_name}}, \
              -e s,%U0_ACCESS%,{{.cds.env.u0_access}}, \
              -e s,%U0_SECRET%,{{.cds.env.u0_secret}}, \
              -e s,%U1_ACCESS%,{{.cds.env.u1_access}}, \
              -e s,%U1_SECRET%,{{.cds.env.u1_secret}}, \
              ceph-s3-tests.conf.in \
              > "$HOME/autogenerated.conf"
          [ -f autogenerated.conf ] && echo "OK" || echo "Failed"

          echo -n "Generating awscli credentials file: $HOME/.aws/credentials "
          mkdir -p "$HOME/.aws"
          cat <<EOF > "$HOME/.aws/credentials"
          [default]
          aws_access_key_id=demo:demo
          aws_secret_access_key=DEMO_PASS
          region={{.cds.env.s3_region}}

          [s3-tests-admin]
          aws_access_key_id={{.cds.env.u0_access}}
          aws_secret_access_key={{.cds.env.u0_secret}}
          region={{.cds.env.s3_region}}

          [s3-tests-user1]
          aws_access_key_id={{.cds.env.u1_access}}
          aws_secret_access_key={{.cds.env.u1_secret}}
          region={{.cds.env.s3_region}}
          EOF
          [ -f "$HOME/.aws/credentials" ] && echo "OK" || echo "Failed"

          echo -n "Generating awscli configuration file: $HOME/.aws/config "
          cat <<EOF > "$HOME/.aws/config"
          [default]
          region = {{.cds.env.s3_region}}
          s3 =
              addressing_style = virtual
              max_concurrent_requests = 10
              max_queue_size = 100
              multipart_threshold = 15MB
              multipart_chunksize = 5MB
              signature_version = s3v4

          [profile s3-tests-admin]
          region = {{.cds.env.s3_region}}
          s3 =
              addressing_style = virtual
              max_concurrent_requests = 10
              max_queue_size = 100
              multipart_threshold = 15MB
              multipart_chunksize = 5MB
              signature_version = s3v4

          [profile s3-tests-user1]
          region = {{.cds.env.s3_region}}
          s3 =
              addressing_style = virtual
              max_concurrent_requests = 10
              max_queue_size = 100
              multipart_threshold = 15MB
              multipart_chunksize = 5MB
              signature_version = s3v4
          EOF
          [ -f "$HOME/.aws/config" ] && echo "OK" || echo "Failed"

          echo -n "Generating nosetests configuration: $HOME/setup.cfg "
          cat <<EOF > "$HOME/setup.cfg"
          [nosetests]
          with-xunit=1
          failure-detail=1
          verbosity=1
          logging-level=INFO
          EOF
          [ -f "$HOME/setup.cfg" ] && echo "OK" || echo "Failed"


      - name: Run tests
        optional: true
        script:
          - cd $HOME
          - S3TEST_CONF=autogenerated.conf ./virtualenv/bin/nosetests -a '!fails_on_aws' -v --with-xunit --xunit-file=tests_report.xml s3tests_boto3.functional.test_s3

      - name: Save tests report
        optional: true
        script:
          - "worker upload --tag='{{.cds.version}}' 'tests_report.xml'"

      - optional: true
        always_executed: true
        jUnitReport: '{{.cds.workspace}}/tests_report.xml'

      - name: Cleanup
        optional: true
        script: |+
          #!/bin/bash
          source virtualenv/bin/activate
          pip install awscli
          ENDPOINT="https://{{.cds.env.s3_server}}:{{.cds.env.s3_port}}"
          python clean-all-buckets.py s3-tests-admin "$ENDPOINT"

    requirements:
      - model: Ubuntu-18.04-VM-b2-07
