version: v.10
name: ceph-s3-tests

jobs:
  - job: Run Ceph's S3 test suite
    always_executed: true
    steps:

      - name: Checkout application
        checkout: '{{ .cds.workspace }}'

      - name: Install dependencies
        script: |+
          #!/bin/bash
          apt-get update -q
          apt-get install -q -y \
            debianutils libevent-dev libffi-dev libxml2-dev libxslt1-dev \
            python3-dev python3-pip python3-virtualenv tox zlib1g-dev
          virtualenv -p python3 --download virtualenv
          ./virtualenv/bin/pip3 install -r requirements.txt
          git submodule update --init --remote s3compat
          rm -rf s3compat/ceph-tests
          ln -s {{.cds.workspace}} s3compat/ceph-tests
          . virtualenv/bin/activate
          PYTZ=$(sed -n -E -e 's/(pytz >=)(.+)$/\2/p' requirements.txt)
          sed -E -e "s/(pytz >=)(.+)$/\\1${PYTZ}/" -i s3compat/requirements.txt
          pip install -r s3compat/requirements.txt

      - name: Generate configuration file
        script: |+
          #!/bin/bash
          #set -x
          cd $HOME

          # ensure region is lowercase
          export CDS_ENV_S3_REGION=${CDS_ENV_S3_REGION,,}

          # set default values
          export CDS_ENV_S3_SERVER=${CDS_ENV_S3_SERVER:-s3.${CDS_ENV_S3_REGION}.io.cloud.ovh.net}
          export CDS_ENV_S3_PORT=${CDS_ENV_S3_PORT:-443}
          export CDS_ENV_U0_PROJECTNAME=${CDS_ENV_U0_PROJECTNAME:-${CDS_ENV_S3_REGION^^}_ceph_s3_tests_project1}
          export CDS_ENV_U0_USERNAME=${CDS_ENV_U0_USERNAME:-${CDS_ENV_S3_REGION^^}_ceph_s3_tests_project1_user1}
          export CDS_ENV_U1_USERNAME=${CDS_ENV_U1_USERNAME:-${CDS_ENV_S3_REGION^^}_ceph_s3_tests_project1_user2}

          # ensure other variables are set
          _check=1
          check_vars="s3_server s3_port s3_region"
          check_vars="$check_vars u0_username u0_projectname"
          check_vars="$check_vars u1_access u1_secret u1_username"
          for var in $check_vars
          do
            _var="CDS_ENV_${var^^}"
            [[ -z "${!_var}" ]] && echo "missing env variable '$var' from infra CDS environment" && _check=0
            worker export ${var} "${!_var}"
          done
          [[ $_check -ne 1 ]] && exit 1

          # generate configuration files from templates
          mkdir -p $HOME/.aws
          for conf in ceph-s3-tests.conf .aws/credentials .aws/config setup.cfg; do
            echo "Generating test configuration file: $HOME/${conf}"
            envsubst < config/${conf}.in > $HOME/$conf
            cat $HOME/$conf
          done

      - name: Run tests
        optional: true
        script: |+
          #!/bin/bash
          start=$(date +%s)
          cd $HOME
          # FIXME(FVE): tox re-creates a virtualenv
          . virtualenv/bin/activate
          S3TEST_CONF=ceph-s3-tests.conf tox -- \
            --junit-xml=tests_report.xml \
            --log-file=debug.log \
            -m 'not fails_on_aws' \
            s3tests_boto3/functional/test_s3.py \
            s3tests_boto3/functional/test_headers.py \
            || true
          stop=$(date +%s)
          worker export tests_duration $(($stop-$start))

      - name: Cleanup
        optional: true
        script: |+
          #!/bin/bash
          . virtualenv/bin/activate
          pip install awscli
          ENDPOINT="https://{{.cds.build.s3_server}}:{{.cds.build.s3_port}}"
          python clean-all-buckets.py "{{.cds.build.u0_username}}" "$ENDPOINT"
          python clean-all-buckets.py "{{.cds.build.u1_username}}" "$ENDPOINT"

      - name: Analyze tests results
        script: |+
          #!/bin/bash
          . virtualenv/bin/activate
          ./s3compat/bin/get_ceph_test_attributes.py
          ./s3compat/bin/report.py \
            -kf "known-failures/common.yaml" \
            -kf "known-failures/{{.infra_id}}.yaml" \
            --detailed s3compat/output/ceph-s3.out.yaml "tests_report.xml" \
            | tee tests_report.txt
          ./results_to_metrics <tests_report.txt >tests_report.openmetrics
          number_of_failures="$(grep new_failures tests_report.openmetrics)"
          worker export number_of_failures ${number_of_failures//* }

      - name: Save tests report
        script:
          - "worker upload --tag='{{.cds.version}}' tests_report.*"
          - "[ -f debug.log ] && worker upload --tag='{{.cds.version}}' debug.log || true"

      - name: Publish results on S3 public cloud
        script: |+
          #!/bin/bash
          . virtualenv/bin/activate
          pip install --upgrade awscli awscli-plugin-endpoint
          cd {{.cds.workspace}}
          mkdir -p "$HOME/.aws"
          cat <<EOF >>"$HOME/.aws/credentials"
          [kpi]
          aws_access_key_id={{.cds.proj.kpi_s3_access_key}}
          aws_secret_access_key={{.cds.proj.kpi_s3_access_secret}}
          region=gra
          EOF
          cat <<EOF >>"$HOME/.aws/config"
          [plugins]
          endpoint = awscli_plugin_endpoint
          [profile kpi]
          s3 =
              endpoint_url = {{.cds.proj.kpi_s3_endpoint}}
              signature_version = s3v4
              addressing_style = virtual
              multipart_threshold = 100MB
          s3api =
              endpoint_url = {{.cds.proj.kpi_s3_endpoint}}
          EOF

          S3_PREFIX="s3://{{.cds.proj.kpi_s3_bucket}}/{{.cds.application}}"
          DATED="{{.cds.env.infra_id}}/results.$(date +%Y%d%m-%H%M).openmetrics"
          GLOBAL="results.{{.cds.env.infra_id}}.openmetrics"
          aws --profile kpi s3 cp tests_report.openmetrics ${S3_PREFIX}/${DATED}
          aws --profile kpi s3 cp tests_report.openmetrics ${S3_PREFIX}/${GLOBAL}

      - name: jUnitReport
        optional: true
        always_executed: true
        jUnitReport: '{{.cds.workspace}}/tests_report.xml'

      - name: Ensure there are no new failed test!
        always_executed: true
        script:
          - test {{.cds.build.number_of_failures}} -eq 0

    requirements:
      - model: Ubuntu-20.04-VM-b2-07
