# Generated by cross_account_acl_tests_generator.py
# Date of creation: 2022-10-21

from botocore.exceptions import ClientError
from nose.tools import eq_ as eq
from nose.plugins.attrib import attr
from .utils import assert_raises
from .utils import _get_status
from . import (
    get_client,
    get_alt_client,
    get_new_bucket_name,
    get_alt_user_id,
)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_objects_v2 cross account with READ acl')
@attr(assertion='success')
def test_list_objects_v2_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    alt_client.list_objects_v2(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_objects_v2 cross account with WRITE acl')
@attr(assertion='fails')
def test_list_objects_v2_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_objects_v2, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_objects_v2 cross account with READ_ACP acl')
@attr(assertion='fails')
def test_list_objects_v2_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_objects_v2, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_objects_v2 cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_list_objects_v2_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_objects_v2, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_objects_v2 cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_list_objects_v2_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.list_objects_v2(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_object_versions cross account with READ acl')
@attr(assertion='success')
def test_list_object_versions_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    alt_client.list_object_versions(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_object_versions cross account with WRITE acl')
@attr(assertion='fails')
def test_list_object_versions_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_object_versions, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_object_versions cross account with READ_ACP acl')
@attr(assertion='fails')
def test_list_object_versions_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_object_versions, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_object_versions cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_list_object_versions_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_object_versions, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_object_versions cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_list_object_versions_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.list_object_versions(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_multipart_uploads cross account with READ acl')
@attr(assertion='success')
def test_list_multipart_uploads_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    alt_client.list_multipart_uploads(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_multipart_uploads cross account with WRITE acl')
@attr(assertion='fails')
def test_list_multipart_uploads_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_multipart_uploads, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_multipart_uploads cross account with READ_ACP acl')
@attr(assertion='fails')
def test_list_multipart_uploads_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_multipart_uploads, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_multipart_uploads cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_list_multipart_uploads_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.list_multipart_uploads, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test list_multipart_uploads cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_list_multipart_uploads_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.list_multipart_uploads(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object cross account with READ acl')
@attr(assertion='fails')
def test_put_object_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object, Bucket=bucket_name, Key="foo"
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object cross account with WRITE acl')
@attr(assertion='success')
def test_put_object_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    alt_client.put_object(Bucket=bucket_name, Key="foo")


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_object_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object, Bucket=bucket_name, Key="foo"
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_object_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object, Bucket=bucket_name, Key="foo"
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_put_object_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.put_object(Bucket=bucket_name, Key="foo")


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_acl cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_acl, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_acl, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_acl cross account with READ_ACP acl')
@attr(assertion='success')
def test_get_bucket_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    alt_client.get_bucket_acl(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_acl cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_acl, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_get_bucket_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.get_bucket_acl(Bucket=bucket_name)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_acl cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_acl, Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_acl, Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_acl cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_acl, Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_acl cross account with WRITE_ACP acl')
@attr(assertion='success')
def test_put_bucket_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    alt_client.put_bucket_acl(Bucket=bucket_name, GrantFullControl="id=" + alt_user_id)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_put_bucket_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.put_bucket_acl(Bucket=bucket_name, GrantFullControl="id=" + alt_user_id)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_cors cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_cors_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_cors, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_cors cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_cors_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_cors, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_cors cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_cors_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_cors, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_cors cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_cors_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_cors, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_cors cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_cors_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_cors, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_cors cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_cors_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    config = {"CORSRules": [{"AllowedMethods": ["GET"], "AllowedOrigins": ["*"]}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_cors, Bucket=bucket_name, CORSConfiguration=config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_cors cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_cors_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    config = {"CORSRules": [{"AllowedMethods": ["GET"], "AllowedOrigins": ["*"]}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_cors, Bucket=bucket_name, CORSConfiguration=config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_cors cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_cors_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    config = {"CORSRules": [{"AllowedMethods": ["GET"], "AllowedOrigins": ["*"]}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_cors, Bucket=bucket_name, CORSConfiguration=config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_cors cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_cors_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    config = {"CORSRules": [{"AllowedMethods": ["GET"], "AllowedOrigins": ["*"]}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_cors, Bucket=bucket_name, CORSConfiguration=config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_cors cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_cors_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    config = {"CORSRules": [{"AllowedMethods": ["GET"], "AllowedOrigins": ["*"]}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_cors, Bucket=bucket_name, CORSConfiguration=config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_tagging cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_tagging_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_tagging, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_tagging cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_tagging_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_tagging, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_tagging cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_tagging_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_tagging, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_tagging cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_tagging_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_tagging, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_tagging cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_tagging_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_tagging, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_tagging cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_tagging_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    tags = {"TagSet": [{"Key": "test", "Value": "test"}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_tagging, Bucket=bucket_name, Tagging=tags
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_tagging cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_tagging_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    tags = {"TagSet": [{"Key": "test", "Value": "test"}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_tagging, Bucket=bucket_name, Tagging=tags
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_tagging cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_tagging_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    tags = {"TagSet": [{"Key": "test", "Value": "test"}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_tagging, Bucket=bucket_name, Tagging=tags
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_tagging cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_tagging_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    tags = {"TagSet": [{"Key": "test", "Value": "test"}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_tagging, Bucket=bucket_name, Tagging=tags
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_tagging cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_tagging_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    tags = {"TagSet": [{"Key": "test", "Value": "test"}]}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_tagging, Bucket=bucket_name, Tagging=tags
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_lifecycle cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_lifecycle_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_lifecycle cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_lifecycle_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_lifecycle cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_lifecycle_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_lifecycle cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_lifecycle_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_lifecycle cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_lifecycle_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_lifecycle_configuration cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_lifecycle_configuration_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    lifecycle_configuration = {
        "Rules": [
            {
                "Expiration": {
                    "Days": 7,
                },
                "ID": "myfirstrule",
                "Filter": {"Prefix": "garbage/"},
                "Status": "Enabled",
            }
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_lifecycle_configuration, Bucket=bucket_name, LifecycleConfiguration=lifecycle_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_lifecycle_configuration cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_lifecycle_configuration_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    lifecycle_configuration = {
        "Rules": [
            {
                "Expiration": {
                    "Days": 7,
                },
                "ID": "myfirstrule",
                "Filter": {"Prefix": "garbage/"},
                "Status": "Enabled",
            }
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_lifecycle_configuration, Bucket=bucket_name, LifecycleConfiguration=lifecycle_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_lifecycle_configuration cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_lifecycle_configuration_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    lifecycle_configuration = {
        "Rules": [
            {
                "Expiration": {
                    "Days": 7,
                },
                "ID": "myfirstrule",
                "Filter": {"Prefix": "garbage/"},
                "Status": "Enabled",
            }
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_lifecycle_configuration, Bucket=bucket_name, LifecycleConfiguration=lifecycle_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_lifecycle_configuration cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_lifecycle_configuration_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    lifecycle_configuration = {
        "Rules": [
            {
                "Expiration": {
                    "Days": 7,
                },
                "ID": "myfirstrule",
                "Filter": {"Prefix": "garbage/"},
                "Status": "Enabled",
            }
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_lifecycle_configuration, Bucket=bucket_name, LifecycleConfiguration=lifecycle_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_lifecycle_configuration cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_lifecycle_configuration_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    lifecycle_configuration = {
        "Rules": [
            {
                "Expiration": {
                    "Days": 7,
                },
                "ID": "myfirstrule",
                "Filter": {"Prefix": "garbage/"},
                "Status": "Enabled",
            }
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_lifecycle_configuration, Bucket=bucket_name, LifecycleConfiguration=lifecycle_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_lifecycle cross account with READ acl')
@attr(assertion='fails')
def test_delete_bucket_lifecycle_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_lifecycle cross account with WRITE acl')
@attr(assertion='fails')
def test_delete_bucket_lifecycle_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_lifecycle cross account with READ_ACP acl')
@attr(assertion='fails')
def test_delete_bucket_lifecycle_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_lifecycle cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_delete_bucket_lifecycle_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_lifecycle cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_delete_bucket_lifecycle_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_lifecycle, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_versioning cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_versioning_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_versioning, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_versioning cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_versioning_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_versioning, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_versioning cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_versioning_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_versioning, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_versioning cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_versioning_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_versioning, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_versioning cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_versioning_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_versioning, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_versioning cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_versioning_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    versioning_configuration = {"Status": "Enabled"}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_versioning, Bucket=bucket_name, VersioningConfiguration=versioning_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_versioning cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_versioning_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    versioning_configuration = {"Status": "Enabled"}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_versioning, Bucket=bucket_name, VersioningConfiguration=versioning_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_versioning cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_versioning_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    versioning_configuration = {"Status": "Enabled"}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_versioning, Bucket=bucket_name, VersioningConfiguration=versioning_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_versioning cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_versioning_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    versioning_configuration = {"Status": "Enabled"}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_versioning, Bucket=bucket_name, VersioningConfiguration=versioning_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_versioning cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_versioning_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    versioning_configuration = {"Status": "Enabled"}
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_versioning, Bucket=bucket_name, VersioningConfiguration=versioning_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_object_lock_configuration cross account with READ acl')
@attr(assertion='fails')
def test_get_object_lock_configuration_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_lock_configuration, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_object_lock_configuration cross account with WRITE acl')
@attr(assertion='fails')
def test_get_object_lock_configuration_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_lock_configuration, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_object_lock_configuration cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_object_lock_configuration_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_lock_configuration, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_object_lock_configuration cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_object_lock_configuration_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_lock_configuration, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_object_lock_configuration cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_object_lock_configuration_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_lock_configuration, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object_lock_configuration cross account with READ acl')
@attr(assertion='fails')
def test_put_object_lock_configuration_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_lock_configuration = {
        'ObjectLockEnabled':'Enabled',
        'Rule': {
            'DefaultRetention': {
                'Mode':'GOVERNANCE',
                'Days':1
            }
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_lock_configuration, Bucket=bucket_name, ObjectLockConfiguration=object_lock_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object_lock_configuration cross account with WRITE acl')
@attr(assertion='fails')
def test_put_object_lock_configuration_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_lock_configuration = {
        'ObjectLockEnabled':'Enabled',
        'Rule': {
            'DefaultRetention': {
                'Mode':'GOVERNANCE',
                'Days':1
            }
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_lock_configuration, Bucket=bucket_name, ObjectLockConfiguration=object_lock_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object_lock_configuration cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_object_lock_configuration_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_lock_configuration = {
        'ObjectLockEnabled':'Enabled',
        'Rule': {
            'DefaultRetention': {
                'Mode':'GOVERNANCE',
                'Days':1
            }
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_lock_configuration, Bucket=bucket_name, ObjectLockConfiguration=object_lock_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object_lock_configuration cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_object_lock_configuration_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_lock_configuration = {
        'ObjectLockEnabled':'Enabled',
        'Rule': {
            'DefaultRetention': {
                'Mode':'GOVERNANCE',
                'Days':1
            }
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_lock_configuration, Bucket=bucket_name, ObjectLockConfiguration=object_lock_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_object_lock_configuration cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_object_lock_configuration_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_lock_configuration = {
        'ObjectLockEnabled':'Enabled',
        'Rule': {
            'DefaultRetention': {
                'Mode':'GOVERNANCE',
                'Days':1
            }
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_lock_configuration, Bucket=bucket_name, ObjectLockConfiguration=object_lock_configuration
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_website cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_website_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_website cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_website_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_website cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_website_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_website cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_website_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_website cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_website_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_website cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_website_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    website_config = {
        'IndexDocument': {
            'Suffix': 'foo'
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_website, Bucket=bucket_name, WebsiteConfiguration=website_config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_website cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_website_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    website_config = {
        'IndexDocument': {
            'Suffix': 'foo'
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_website, Bucket=bucket_name, WebsiteConfiguration=website_config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_website cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_website_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    website_config = {
        'IndexDocument': {
            'Suffix': 'foo'
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_website, Bucket=bucket_name, WebsiteConfiguration=website_config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_website cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_website_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    website_config = {
        'IndexDocument': {
            'Suffix': 'foo'
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_website, Bucket=bucket_name, WebsiteConfiguration=website_config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_website cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_website_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    website_config = {
        'IndexDocument': {
            'Suffix': 'foo'
        }
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_website, Bucket=bucket_name, WebsiteConfiguration=website_config
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_website cross account with READ acl')
@attr(assertion='fails')
def test_delete_bucket_website_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_website cross account with WRITE acl')
@attr(assertion='fails')
def test_delete_bucket_website_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_website cross account with READ_ACP acl')
@attr(assertion='fails')
def test_delete_bucket_website_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_website cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_delete_bucket_website_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='delete')
@attr(operation='Test delete_bucket_website cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_delete_bucket_website_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.delete_bucket_website, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_encryption cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_encryption_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_encryption, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_encryption cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_encryption_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_encryption, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_encryption cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_encryption_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_encryption, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_encryption cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_encryption_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_encryption, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_encryption cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_encryption_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_encryption, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_encryption cross account with READ acl')
@attr(assertion='fails')
def test_put_bucket_encryption_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    server_side_encryption_conf = {
        'Rules': [
            {
                'ApplyServerSideEncryptionByDefault': {
                    'SSEAlgorithm': 'AES256'
                }
            },
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_encryption, Bucket=bucket_name, ServerSideEncryptionConfiguration=server_side_encryption_conf
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_encryption cross account with WRITE acl')
@attr(assertion='fails')
def test_put_bucket_encryption_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    server_side_encryption_conf = {
        'Rules': [
            {
                'ApplyServerSideEncryptionByDefault': {
                    'SSEAlgorithm': 'AES256'
                }
            },
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_encryption, Bucket=bucket_name, ServerSideEncryptionConfiguration=server_side_encryption_conf
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_encryption cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_bucket_encryption_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    server_side_encryption_conf = {
        'Rules': [
            {
                'ApplyServerSideEncryptionByDefault': {
                    'SSEAlgorithm': 'AES256'
                }
            },
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_encryption, Bucket=bucket_name, ServerSideEncryptionConfiguration=server_side_encryption_conf
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_encryption cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_put_bucket_encryption_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    server_side_encryption_conf = {
        'Rules': [
            {
                'ApplyServerSideEncryptionByDefault': {
                    'SSEAlgorithm': 'AES256'
                }
            },
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_encryption, Bucket=bucket_name, ServerSideEncryptionConfiguration=server_side_encryption_conf
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='put')
@attr(operation='Test put_bucket_encryption cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_put_bucket_encryption_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    server_side_encryption_conf = {
        'Rules': [
            {
                'ApplyServerSideEncryptionByDefault': {
                    'SSEAlgorithm': 'AES256'
                }
            },
        ]
    }
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_bucket_encryption, Bucket=bucket_name, ServerSideEncryptionConfiguration=server_side_encryption_conf
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_location cross account with READ acl')
@attr(assertion='fails')
def test_get_bucket_location_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_location, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_location cross account with WRITE acl')
@attr(assertion='fails')
def test_get_bucket_location_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_location, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_location cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_bucket_location_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_location, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_location cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_bucket_location_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_location, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='bucket')
@attr(method='get')
@attr(operation='Test get_bucket_location cross account with FULL_CONTROL acl')
@attr(assertion='fails')
def test_get_bucket_location_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_bucket_acl(
        Bucket=bucket_name, GrantFullControl="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_bucket_location, Bucket=bucket_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object cross account with READ acl')
@attr(assertion='success')
def test_get_object_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    alt_client.get_object(Bucket=bucket_name, Key=object_name)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object cross account with WRITE acl')
@attr(assertion='fails')
def test_get_object_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_object_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_object_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_get_object_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.get_object(Bucket=bucket_name, Key=object_name)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version cross account with READ acl')
@attr(assertion='success')
def test_get_object_version_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    alt_client.get_object(Bucket=bucket_name, Key=object_name, VersionId=version_id)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version cross account with WRITE acl')
@attr(assertion='fails')
def test_get_object_version_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version cross account with READ_ACP acl')
@attr(assertion='fails')
def test_get_object_version_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_object_version_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_get_object_version_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.get_object(Bucket=bucket_name, Key=object_name, VersionId=version_id)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_acl cross account with READ acl')
@attr(assertion='fails')
def test_get_object_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_get_object_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_acl cross account with READ_ACP acl')
@attr(assertion='success')
def test_get_object_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    alt_client.get_object_acl(Bucket=bucket_name, Key=object_name)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_acl cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_object_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_get_object_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.get_object_acl(Bucket=bucket_name, Key=object_name)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_acl cross account with READ acl')
@attr(assertion='fails')
def test_put_object_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_put_object_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_acl cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_object_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_acl cross account with WRITE_ACP acl')
@attr(assertion='success')
def test_put_object_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    alt_client.put_object_acl(Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_put_object_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.put_object_acl(Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version_acl cross account with READ acl')
@attr(assertion='fails')
def test_get_object_version_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_get_object_version_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version_acl cross account with READ_ACP acl')
@attr(assertion='success')
def test_get_object_version_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    alt_client.get_object_acl(Bucket=bucket_name, Key=object_name, VersionId=version_id)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version_acl cross account with WRITE_ACP acl')
@attr(assertion='fails')
def test_get_object_version_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.get_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='get')
@attr(operation='Test get_object_version_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_get_object_version_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.get_object_acl(Bucket=bucket_name, Key=object_name, VersionId=version_id)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_version_acl cross account with READ acl')
@attr(assertion='fails')
def test_put_object_version_acl_cross_account_with_READ_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantRead="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_version_acl cross account with WRITE acl')
@attr(assertion='fails')
def test_put_object_version_acl_cross_account_with_WRITE_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWrite="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_version_acl cross account with READ_ACP acl')
@attr(assertion='fails')
def test_put_object_version_acl_cross_account_with_READ_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl READ_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantReadACP="id=" + alt_user_id
    )
    e = assert_raises(
        ClientError, alt_client.put_object_acl, Bucket=bucket_name, Key=object_name, VersionId=version_id, GrantFullControl="id=" + alt_user_id
    )
    status = _get_status(e.response)
    eq(status, 403)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_version_acl cross account with WRITE_ACP acl')
@attr(assertion='success')
def test_put_object_version_acl_cross_account_with_WRITE_ACP_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl WRITE_ACP for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantWriteACP="id=" + alt_user_id
    )
    alt_client.put_object_acl(Bucket=bucket_name, Key=object_name, VersionId=version_id, GrantFullControl="id=" + alt_user_id)


@attr(resource='object')
@attr(method='put')
@attr(operation='Test put_object_version_acl cross account with FULL_CONTROL acl')
@attr(assertion='success')
def test_put_object_version_acl_cross_account_with_FULL_CONTROL_acl():
    bucket_name = get_new_bucket_name()
    main_client = get_client()
    main_client.create_bucket(Bucket=bucket_name)
    object_name = "foo"
    main_client.put_object(Bucket=bucket_name, Key=object_name)
    main_client.put_bucket_versioning(
        Bucket=bucket_name, VersioningConfiguration={"Status": "Enabled"}
    )
    response = main_client.put_object(Bucket=bucket_name, Key=object_name)
    version_id = response["VersionId"]
    alt_client = get_alt_client()
    alt_user_id = get_alt_user_id()
    # put bucket acl FULL_CONTROL for alt user
    main_client.put_object_acl(
        Bucket=bucket_name, Key=object_name, GrantFullControl="id=" + alt_user_id
    )
    alt_client.put_object_acl(Bucket=bucket_name, Key=object_name, VersionId=version_id, GrantFullControl="id=" + alt_user_id)
